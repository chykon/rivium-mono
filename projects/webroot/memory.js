export class Memory {
    xlen;
    space; // maximum length in bytes, 2^XLEN
    vcount;
    mrcount;
    regres; // reserve for registers, MRCOUNT*XLEN*VCOUNT
    mempow;
    length; // actual length, (2^MEMPOW)-REGRES
    buffer; // memory data
    constructor(xlen, vcount, mrcount, mempow) {
        this.xlen = xlen;
        this.vcount = vcount;
        this.mrcount = mrcount;
        this.mempow = mempow;
        this.space = 2 ** this.xlen;
        this.regres = this.mrcount * this.xlen * this.vcount;
        this.length = (2 ** this.mempow) - this.regres;
        const wasmMemoryPageSize = 65536;
        const pages = Math.ceil(this.length / wasmMemoryPageSize);
        const wasmMemory = new WebAssembly.Memory({ initial: pages, maximum: pages, shared: false });
        this.buffer = wasmMemory.buffer;
    }
    setByte(address, byte) {
        const u8arr = new Uint8Array(this.buffer);
        u8arr[this.computeAddress(address)] = byte;
    }
    getByte(address) {
        const u8arr = new Uint8Array(this.buffer);
        const byte = u8arr[this.computeAddress(address)];
        if (byte === undefined) {
            throw Error('byte === undefined');
        }
        else {
            return byte;
        }
    }
    computeAddress(address) {
        return address % this.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lbW9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sTUFBTTtJQUNSLElBQUksQ0FBYTtJQUNqQixLQUFLLENBQVEsQ0FBQyxrQ0FBa0M7SUFDaEQsTUFBTSxDQUFlO0lBQ3JCLE9BQU8sQ0FBZ0I7SUFDdkIsTUFBTSxDQUFRLENBQUMsNkNBQTZDO0lBQzVELE1BQU0sQ0FBZTtJQUNyQixNQUFNLENBQVEsQ0FBQyxtQ0FBbUM7SUFDbEQsTUFBTSxDQUFhLENBQUMsY0FBYztJQUUzQyxZQUNFLElBQWlCLEVBQ2pCLE1BQXFCLEVBQ3JCLE9BQXVCLEVBQ3ZCLE1BQXFCO1FBRXJCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBRXBCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBRTlDLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3pELE1BQU0sVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUM1RixJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUE7SUFDakMsQ0FBQztJQUVELE9BQU8sQ0FBRSxPQUFlLEVBQUUsSUFBWTtRQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDekMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7SUFDNUMsQ0FBQztJQUVELE9BQU8sQ0FBRSxPQUFlO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN6QyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ2hELElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN0QixNQUFNLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1NBQ2xDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQTtTQUNaO0lBQ0gsQ0FBQztJQUVPLGNBQWMsQ0FBRSxPQUFlO1FBQ3JDLE9BQU8sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4vY29tbW9uLmpzJ1xuXG5leHBvcnQgY2xhc3MgTWVtb3J5IHtcbiAgcmVhZG9ubHkgeGxlbjogY29tbW9uLlhsZW5cbiAgcmVhZG9ubHkgc3BhY2U6IG51bWJlciAvLyBtYXhpbXVtIGxlbmd0aCBpbiBieXRlcywgMl5YTEVOXG4gIHJlYWRvbmx5IHZjb3VudDogY29tbW9uLlZjb3VudFxuICByZWFkb25seSBtcmNvdW50OiBjb21tb24uTXJjb3VudFxuICByZWFkb25seSByZWdyZXM6IG51bWJlciAvLyByZXNlcnZlIGZvciByZWdpc3RlcnMsIE1SQ09VTlQqWExFTipWQ09VTlRcbiAgcmVhZG9ubHkgbWVtcG93OiBjb21tb24uTWVtcG93XG4gIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyIC8vIGFjdHVhbCBsZW5ndGgsICgyXk1FTVBPVyktUkVHUkVTXG4gIHJlYWRvbmx5IGJ1ZmZlcjogQXJyYXlCdWZmZXIgLy8gbWVtb3J5IGRhdGFcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgeGxlbjogY29tbW9uLlhsZW4sXG4gICAgdmNvdW50OiBjb21tb24uVmNvdW50LFxuICAgIG1yY291bnQ6IGNvbW1vbi5NcmNvdW50LFxuICAgIG1lbXBvdzogY29tbW9uLk1lbXBvd1xuICApIHtcbiAgICB0aGlzLnhsZW4gPSB4bGVuXG4gICAgdGhpcy52Y291bnQgPSB2Y291bnRcbiAgICB0aGlzLm1yY291bnQgPSBtcmNvdW50XG4gICAgdGhpcy5tZW1wb3cgPSBtZW1wb3dcblxuICAgIHRoaXMuc3BhY2UgPSAyICoqIHRoaXMueGxlblxuICAgIHRoaXMucmVncmVzID0gdGhpcy5tcmNvdW50ICogdGhpcy54bGVuICogdGhpcy52Y291bnRcbiAgICB0aGlzLmxlbmd0aCA9ICgyICoqIHRoaXMubWVtcG93KSAtIHRoaXMucmVncmVzXG5cbiAgICBjb25zdCB3YXNtTWVtb3J5UGFnZVNpemUgPSA2NTUzNlxuICAgIGNvbnN0IHBhZ2VzID0gTWF0aC5jZWlsKHRoaXMubGVuZ3RoIC8gd2FzbU1lbW9yeVBhZ2VTaXplKVxuICAgIGNvbnN0IHdhc21NZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHsgaW5pdGlhbDogcGFnZXMsIG1heGltdW06IHBhZ2VzLCBzaGFyZWQ6IGZhbHNlIH0pXG4gICAgdGhpcy5idWZmZXIgPSB3YXNtTWVtb3J5LmJ1ZmZlclxuICB9XG5cbiAgc2V0Qnl0ZSAoYWRkcmVzczogbnVtYmVyLCBieXRlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB1OGFyciA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKVxuICAgIHU4YXJyW3RoaXMuY29tcHV0ZUFkZHJlc3MoYWRkcmVzcyldID0gYnl0ZVxuICB9XG5cbiAgZ2V0Qnl0ZSAoYWRkcmVzczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB1OGFyciA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyKVxuICAgIGNvbnN0IGJ5dGUgPSB1OGFyclt0aGlzLmNvbXB1dGVBZGRyZXNzKGFkZHJlc3MpXVxuICAgIGlmIChieXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IEVycm9yKCdieXRlID09PSB1bmRlZmluZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnl0ZVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcHV0ZUFkZHJlc3MgKGFkZHJlc3M6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGFkZHJlc3MgJSB0aGlzLmxlbmd0aFxuICB9XG59XG4iXX0=